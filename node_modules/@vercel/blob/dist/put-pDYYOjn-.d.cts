import { Readable } from 'stream';

interface BlobCommandOptions {
    /**
     * Define your blob API token.
     * @defaultvalue process.env.BLOB_READ_WRITE_TOKEN
     */
    token?: string;
}
interface CreateBlobCommandOptions extends BlobCommandOptions {
    /**
     * Whether the blob should be publicly accessible. Support for private blobs is planned.
     */
    access: 'public';
    /**
     * Adds a random suffix to the filename.
     * @defaultvalue true
     */
    addRandomSuffix?: boolean;
    /**
     * Defines the content type of the blob. By default, this value is inferred from the pathname. Sent as the 'content-type' header when downloading a blob.
     */
    contentType?: string;
    /**
     * Number in seconds to configure the edge and browser cache. The maximum values are 5 minutes for the edge cache and unlimited for the browser cache.
     * Detailed documentation can be found here: https://vercel.com/docs/storage/vercel-blob#caching
     * @defaultvalue 365 * 24 * 60 * 60 (1 Year)
     */
    cacheControlMaxAge?: number;
    /**
     * Whether to use multipart upload. Use this when uploading large files. It will split the file into multiple parts, upload them in parallel and retry failed parts.
     * @defaultvalue false
     */
    multipart?: boolean;
}
declare class BlobError extends Error {
    constructor(message: string);
}

interface PutCommandOptions extends CreateBlobCommandOptions {
}
interface PutBlobResult {
    url: string;
    pathname: string;
    contentType: string;
    contentDisposition: string;
}
type PutBody = string | Readable | Blob | ArrayBuffer | ReadableStream | File;

export { BlobError as B, type CreateBlobCommandOptions as C, type PutCommandOptions as P, type BlobCommandOptions as a, type PutBody as b, type PutBlobResult as c };
